
Down with OPP (Other People's Pipes)
========================================================
author: JD Long
date:   May 9, 2018
font-family: 'Helvetica'
#incremental: true
css: custom.css

Where are we going?
========================================================

- `dplyr` can be fast to write
- `dplyr` can write SQL 
- `dplyr` writing SQL is fast
- One controversial idea
- One warning
- One hack (row-wise)

JD Who?
========================================================
<div align="center">
<img src="down_with_opp_dplyr-figure/twitter.png" width=600 >
<br>
<img src="down_with_opp_dplyr-figure/JDL-SO.png" width=600 >
</div>

OPP?
======================
<div align="center">
<img src="down_with_opp_dplyr-figure/opp.png" width=700 >
<br>
Tidy by Nature

R puns rock!
===================
```
sink("/dev/null")
```

The Unsinkable /dev/null
===================

<div align="center">
<img src="down_with_opp_dplyr-figure/dev_null.png" width=800 >
<br>

RenaissanceRe
==========================
<div align="center">
<img src="down_with_opp_dplyr-figure/rnr.png" width=900 >
<br>

We're Hiring!
========================================================


NYC Risk Analyst 
- early/mid career 
- Not R centric   `    :(`
- Team with me  `  :)`

http://bit.ly/rnr_job

dplyr - set up example
========================================================

```{r}
library(tidyverse)

mtcars %>%
  rownames_to_column( var = 'longname') ->
df_cars
```
dplyr - select
========================================================

```{r}
df_cars %>% 
  select(longname, cyl, hp) %>%
  head
  
```

dplyr - filter
========================================================

```{r }
df_cars %>% 
  select(longname, cyl, hp) %>%
  filter( cyl == 8) %>%
  head
```

dplyr - mutate
========================================================

```{r }
df_cars %>% 
  select(longname, cyl, hp) %>%
  filter( cyl == 8) %>%
  mutate( sqrt_hp = sqrt(hp), 
          shortname = word(longname, 1) ) %>%
  head
```


dplyr - group_by
========================================================

```{r }
df_cars %>% 
  select(longname, cyl, hp) %>%
  filter( cyl == 8) %>%
  mutate( sqrt_hp = sqrt(hp), 
          shortname = word(longname, 1) ) %>%
  select( - longname) %>%
  group_by(shortname) %>%
  head
```

clean up - note changes
========================================================

```{r }
df_cars %>% 
  select(longname, cyl, hp) %>%
  mutate( shortname = word(longname, 1) ) %>%
  select( - longname)  ->
df_cars_limited
head( df_cars_limited )
```

tangent: why pipe?
========================================================

```{r }

head(
  select(
    mutate( 
      select(df_cars, longname, cyl, hp) , 
      shortname = word(longname, 1) 
      ), 
    -longname 
    )
)
```

tangent: why pipe? (cont)
========================================================
class: small-code
```{r }
df_cars_3vars <-
  select(df_cars, longname, cyl, hp)

df_cars_3vars_shortname <-
  mutate( df_cars_3vars, 
          shortname = word(df_cars_3vars$longname, 1) ) 

df_cars_3vars_shortname <-
  select( df_cars_3vars_shortname, - longname)  

head( df_cars_3vars_shortname )
```

Before the tangent...
========================================================

```{r }
df_cars %>% 
  select(longname, cyl, hp) %>%
  mutate( shortname = word(longname, 1) ) %>%
  select( - longname)  ->
df_cars_limited
head( df_cars_limited )
```


dplyr - summarize
========================================================

```{r }
df_cars_limited %>%
  group_by(shortname, cyl)%>% 
  summarize( avg_hp = mean(hp) )  %>%
  head(3)
```
<font size=50%> Note the grouping change. wtf? </font>

dplyr - join
========================================================

```{r }
cyl_map <- data.frame(
  cyl = c(4,6,8), 
  cyl_name = c('four','six','eight'))

df_cars_limited %>% 
  left_join( cyl_map ) %>%
  head(3)
```

dplyr - case_when (+ sort)
========================================================
class: small-code
```{r }
df_cars_limited %>% 
  mutate(Pow= case_when( hp>200 & cyl>=8 ~ 'Strong', 
                     TRUE ~ 'Weak') ) %>%
  arrange(-hp)
```
mutate vs. summarize
========================================================
`mutate` adds a column but keeps same # rows

`summarize` adds a column but reduces the rows down to one row per unique group based on `group_by`

database time!
========================================================

```{r }
con <- DBI::dbConnect(RSQLite::SQLite(), 
                      path = ":memory:")
## could use memdb_frame

copy_to(con, df_cars, "df_cars",
  temporary = FALSE)

df_cars_db <- tbl(con, "df_cars")
  

```
what are these things?
========================================================

```{r }
class(df_cars)

class(as.tibble(df_cars))

class(df_cars_db)
  
```

so this looks sane...
========================================================

```{r }
df_cars_db %>% 
  group_by( cyl) %>%
  summarize( avg = mean(hp),
             std = sd(hp) )  ->
mean_hp_by_cyl

head( mean_hp_by_cyl )
```

what's in mean_hp_by_cyl?
========================================================

```{r }
df_cars_db %>% 
  group_by( cyl) %>%
  summarize( avg = mean(hp),
             std = sd(hp) )  %>%
  show_query 
```
```
<SQL>
SELECT 
  `cyl`, 
  AVG(`hp`) AS `avg`, 
  STDEV(`hp`) AS `std`
FROM `df_cars`
GROUP BY `cyl`
```

automagic subqueries
========================================================
class: small-code
```{r }
df_cars_db %>% 
  group_by( cyl) %>%
  summarize( avg = mean(hp),
             std = sd(hp) )  %>%
  filter( avg > 100) %>%
  show_query 
```
```
<SQL>
SELECT *
FROM ( SELECT `cyl`, 
       AVG(`hp`) AS `avg`, 
       STDEV(`hp`) AS `std`
       FROM `df_cars`
       GROUP BY `cyl`
     )
WHERE (`avg` > 100.0)
```

oh yes...
========================================================
<div align="center">
<img src="down_with_opp_dplyr-figure/magic.gif" width=600 >

</div>

lazy af... 
========================================================
<div align="center">
<img src="down_with_opp_dplyr-figure/lazy_push.gif" width=600 >

</div>

lazy af...
========================================================
class: small-code
```{r }
mean_hp_by_cyl %>%
  collect ->
local_mean_hp_by_cyl

head(local_mean_hp_by_cyl)

class(local_mean_hp_by_cyl)
```

R Mapped to SQL
========================================================
class: small-code
```
math operators: +, -, *, /, %%, ^

math functions: abs, acos, acosh, asin, asinh, atan, atan2, atanh, ceiling, cos, cosh, cot, coth, exp, floor, log, log10, round, sign, sin, sinh, sqrt, tan, tanh

logical comparisons: <, <=, !=, >=, >, ==, %in%

boolean operations: &, &&, |, ||, !, xor

basic aggregations: mean, sum, min, max, sd, var

string functions: tolower, toupper, trimws, nchar, substr

coerce types: as.numeric, as.integer, as.character
```

KNEAD MOAR?
========================================================

```
vignette("sql-translation")
```
<div align="center">
<img src="down_with_opp_dplyr-figure/moar.gif" width=700 >

</div>

reprex
========================================================
<div align="center">
<img src="down_with_opp_dplyr-figure/help.gif" width=900 >
</div>

tbl_lazy & simulate_dbi
======================================================
```{r}
library(dbplyr)
data.frame(x = 1, y = 2) %>%
  tbl_lazy(src = simulate_sqlite()) ->
df_sqlite ## this is a lazy table

df_sqlite %>% 
  summarise(x = sd(x)) -> 
my_tbl_df

my_tbl_df %>%
  show_query()
```

simulate functions
======================================================
```
dbi           sqlite
postgres      mysql
odbc          impala
mssql         oracle
hive          odbc_postgresql
teradata      odbc_access
```

Common Snags (for me)
==========================

1) Search Path:
```
dbSendQuery(con, 
    build_sql("set search_path to 
    '$user', public, reports, sandbox"))
```

2) Name Clashes on `Join`

workflow with redshift
=====================
```
count(*)
349,523,453,670
```
* pre define joins
* pass around a "big table"
* set up criteria
* transform
* collect

WARNING!!!
===========================
dplyr can stomp on Core R functions:
```{r, echo=FALSE}
detach("package:dplyr")
```
```{r}
head( lag(ldeaths, 12) )
head( lag(ldeaths, k=12) == 
        head( lag(ldeaths, 12) ) )
```

WARNING!!!
============================
Now load `dplyr`
```{r, error=TRUE}
library(dplyr)
head( lag(ldeaths, 12) )
head( lag(ldeaths, k=12) )
```
WARNING!!!
============================
must clarify in your code:
```{r, error=TRUE}
library(dplyr)
head( stats::lag(ldeaths, 12) )
head( stats::lag(ldeaths, k=12) )
```

WTF?!?! Hidden Failure!
============================
```{r, echo=FALSE}
detach("package:dplyr")
```
```{r, error=TRUE}
vec_dbl <- as.double(ldeaths)
head( lag(vec_dbl, 12) )

library(dplyr)
head( lag(vec_dbl, 12) )
```

Opinions Vary
===========================
<div align="center">
<img src="down_with_opp_dplyr-figure/drob_jryan.png" width=900 >
</div>

Controversy 
===============
Right assignment after a pipe chain is teh awesome!!!

```{r, eval=FALSE}
data %>%
  fun %>%
  more_fun ->
fun_fun_data
```
No left indent on the result, y'all!

row-wise design pattern
=============================

```{r}
fun <- function(a, b, c){
  sum(seq(a,b,c))
}

df <- data.frame(mn=c(1,2,3), 
                 mx=c(8,13,18), 
                 rng=c(1,2,3))
df
```

row-wise
=========================

```{r}

df %>% 
  mutate( output = 
            unlist( 
              pmap(list(a=mn, b=mx, c=rng), fun)
              )
          )
```
